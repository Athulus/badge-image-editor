{"version":3,"sources":["Components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","canvas","refs","ctx","getContext","draw","badgeX","Math","floor","currentX","badgeY","currentY","tempDataPoints","push","x","y","beginPath","moveTo","previousX","previousY","lineTo","strokeStyle","strokeColor","lineWidth","stroke","closePath","formatPoints","arr","concat","map","el","join","saveData","splitByAxis","axis","lastX","tmpArr","index","i","length","flatten","apply","dataPoints","pointArr","xPoints","yPoints","cleanPoints","setState","datapoints","moveMouse","movement","evt","clientX","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","state","_this2","react_default","a","createElement","style","textAlign","Grid_default","container","item","xs","display","alignItems","justifyContent","onMouseMove","onMouseDown","onMouseUp","onMouseOut","ref","width","height","border","marginTop","Button_default","onClick","variant","color","lib_default","language","theme","value","React","Component","App","props","Components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39ffc35c.chunk.js","sourcesContent":["import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport MonacoEditor from 'react-monaco-editor';\n\nclass Editor extends React.Component {\n    constructor() {\n        super()\n        this.canvas = \"\";\n        this.ctx = \"\";\n        this.currentX = 0;\n        this.currentY = 0;\n        this.previousX = 0;\n        this.previousY = 0;\n        this.dot_flag = false;\n        this.flag = false;\n        this.strokeColor = \"black\";\n        this.lineWidth = 3;\n        this.tempDataPoints = [];\n        this.state = {\n            datapoints: \"\"\n        }\n    }\n    componentDidMount = () => {\n        this.canvas = this.refs.canvas\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n    draw = () => {\n        let canvasX = Math.floor(this.currentX/2);\n        let canvasY = Math.floor(this.currentY/2);\n        let badgeX = canvasX - 128;\n        let badgeY = canvasY - 128;\n        this.tempDataPoints.push({x:badgeX, y: badgeY})\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.previousX, this.previousY);\n        this.ctx.lineTo(this.currentX, this.currentY);\n        this.ctx.strokeStyle = this.strokeColor;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    formatPoints = arr => {\n        return `{\\n${arr.map(el => `\\t{ ${el.x}, ${el.y} },\\n`).join('')}\\n};`\n    }\n    saveData = () => {\n        const splitByAxis = (arr, axis) => {\n            let tmpArr = [[]];\n            let index = 0;\n            let lastX;\n            for(let i = 0; i < arr.length; i++){\n                if(i === 0){\n                    lastX = arr[i][axis]\n                }\n                tmpArr[index] = tmpArr[index] || [];\n                tmpArr[index].push(arr[i])\n                if(arr[i][axis] === lastX){\n                } else {\n                    lastX = arr[i][axis];\n                    index++\n                }\n            }\n            return tmpArr\n        }\n\n        const flatten = arr => [].concat.apply([], arr);\n\n        const cleanPoints = pointArr => {\n            const xPoints = splitByAxis(pointArr, \"x\").map( x => {\n                if(x.length > 2){\n                    return [x[0], x[x.length -1]]\n                }\n                return x\n            })\n            const yPoints = splitByAxis(flatten(xPoints), \"y\").map( x => {\n                if(x.length > 2){\n                    return [x[0], x[x.length -1]]\n                }\n                return x\n            })\n            return flatten(yPoints);\n        }\n\n        const dataPoints = cleanPoints(this.tempDataPoints)\n\n        this.setState({\n            datapoints: this.formatPoints(dataPoints)\n        })\n    }\n    moveMouse = (movement, evt) => {\n        if (movement === \"down\") {\n            this.previousX = this.currentX;\n            this.previousY = this.previousY;\n            this.currentX = evt.clientX - this.canvas.offsetLeft;\n            this.currentY = evt.clientY - this.canvas.offsetTop;\n\n            this.flag = true;\n            this.dot_flag = true;\n\n            if(this.dot_flag){\n                this.ctx.beginPath();\n                this.ctx.fillStyle = this.strokeColor;\n                this.ctx.fillRect(this.currentX, this.currentY, 3, 3);//paintbrush\n                this.ctx.closePath();\n                this.dot_flag = false;\n            }\n        }\n        if (movement === \"up\") {\n            this.tempDataPoints.push({x:-128, y: -128});\n            this.flag = false;\n        }\n        if(movement === \"out\"){\n            this.flag = false;\n        }\n        if (movement === \"move\") {\n            if(this.flag){\n                this.previousX = this.currentX;\n                this.previousY = this.currentY;\n                this.currentX = evt.clientX - this.canvas.offsetLeft;\n                this.currentY = evt.clientY - this.canvas.offsetTop;\n                this.draw();\n            }\n        }\n    }\n    render() {\n        const {datapoints} = this.state;\n        return (\n            <div>\n                <h1 style={{ textAlign: 'center' }}>Badge Image Editor</h1>\n                <Grid container>\n                    <Grid item xs={5} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                        <canvas\n                            onMouseMove={(evt) => this.moveMouse(\"move\", evt)}\n                            onMouseDown={(evt) => this.moveMouse(\"down\", evt)}\n                            onMouseUp={(evt) => this.moveMouse(\"up\", evt)}\n                            onMouseOut={(evt) => this.moveMouse(\"out\", evt)}\n                            ref=\"canvas\"\n                            width={512}\n                            height={512}\n                            style={{ border: '3px solid black'}}>\n                        </canvas>\n                    </Grid>\n                    <Grid item xs={2} style={{display: \"flex\", justifyContent: 'center', marginTop:\"15px\"}}>\n                        <Button onClick={this.saveData} variant=\"outlined\" color=\"primary\">\n                            Export to text editor\n                        </Button>\n                    </Grid>\n                    <Grid item xs={5} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginTop:\"15px\" }}>\n                        <MonacoEditor\n                            width=\"500\"\n                            height=\"550\"\n                            language=\"cpp\"\n                            theme=\"vs-dark\"\n                            value={datapoints}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nexport default Editor","import React from 'react';\nimport './App.css';\nimport Editor from './Components/Editor'\nconst App = props => {\n    return (\n        <Editor />\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}